import streamlit as st
from st_copy_to_clipboard import st_copy_to_clipboard

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°—Ç—Ä–∞–Ω–∏—Ü–∞ –í—Ö–æ–¥–∞
def login_page():
    st.header("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    username = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–ù–∞–ø—Ä–∏–º–µ—Ä, –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤ –Ø—Ä–æ—Å–ª–∞–≤)")

    if st.button("–í–æ–π—Ç–∏"):
        if username:
            st.session_state['logged_in'] = True
            st.session_state['username'] = username
            st.rerun()
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

# --- –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö ---
PRODUCTS_DK = [
    "–î–ö", "–ê–∫—Ç", "–¢—Ä–∑", "–ö–æ–º–±–æ/–ö—Ä–æ—Å—Å –ö–ö –û–¥–æ–±—Ä–µ–Ω–æ", "–ö–æ–º–±–æ/–ö—Ä–æ—Å—Å –ö–ö –í—ã–¥–∞–Ω–æ", "–¢—Ä–∑.", "–¶–ü", "–ì–æ—Å.–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–°–º–∞—Ä—Ç", "–ö–µ—à–±–µ–∫", "–ñ–ö–£", "–ë–°",
    "–ò–Ω–≤–µ—Å—Ç–∫–æ–ø–∏–ª–∫–∞", "–ë–° —Å–æ –°—Ç—Ä–∞—Ç–µ–≥–∏–µ–π", "–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è", "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –°—á–µ—Ç",
    "–í–∫–ª–∞–¥", "–î–µ—Ç—Å–∫–∞—è –ö—Ä–æ—Å—Å", "–°–∏–º-–ö–∞—Ä—Ç–∞", "–ü–µ—Ä–µ–≤–æ–¥ –ü–µ–Ω—Å–∏–∏",
    "–°–µ–ª—Ñ–∏ –î–ö", "–°–µ–ª—Ñ–∏ –ö–ö"
]

PRODUCTS_KK = [
    "–ö–ö", "–ê–∫—Ç", "–¢—Ä–∑", "–ö—Ä–æ—Å—Å –î–ö", "–¶–ü", "–ì–æ—Å.–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–°–º–∞—Ä—Ç", "–ö–µ—à–±–µ–∫", "–ñ–ö–£", "–ë–°",
    "–ò–Ω–≤–µ—Å—Ç–∫–æ–ø–∏–ª–∫–∞", "–ë–° —Å–æ –°—Ç—Ä–∞—Ç–µ–≥–∏–µ–π", "–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è", "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –°—á–µ—Ç",
    "–í–∫–ª–∞–¥", "–î–µ—Ç—Å–∫–∞—è –ö—Ä–æ—Å—Å", "–°—Ç–∏–∫–µ—Ä –ö—Ä–æ—Å—Å", "–°–∏–º-–ö–∞—Ä—Ç–∞", "–ü–µ—Ä–µ–≤–æ–¥ –ü–µ–Ω—Å–∏–∏",
    "–°–µ–ª—Ñ–∏ –î–ö"
]

PRODUCTS_MP = [
    "–ú–ü", "–¶–ü", "–ì–æ—Å.–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–°–º–∞—Ä—Ç", "–ö–µ—à–±–µ–∫", "–ñ–ö–£", "–ë–°", "–ò–Ω–≤–µ—Å—Ç–∫–æ–ø–∏–ª–∫–∞",
    "–ë–° —Å–æ –°—Ç—Ä–∞—Ç–µ–≥–∏–µ–π", "–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è", "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –°—á–µ—Ç", "–í–∫–ª–∞–¥",
    "–î–µ—Ç—Å–∫–∞—è –ö—Ä–æ—Å—Å", "–°—Ç–∏–∫–µ—Ä –ö—Ä–æ—Å—Å", "–°–∏–º-–ö–∞—Ä—Ç–∞", "–ü–µ—Ä–µ–≤–æ–¥ –ü–µ–Ω—Å–∏–∏", "–ö—Ä–æ—Å—Å –î–ö",
    "–°–µ–ª—Ñ–∏ –î–ö", "–°–µ–ª—Ñ–∏ –ö–ö"
]

PRODUCT_LISTS = {
    "–î–ö": PRODUCTS_DK,
    "–ö–ö": PRODUCTS_KK,
    "–ú–ü": PRODUCTS_MP
}

# --- –ù–û–í–´–ô –ë–õ–û–ö: –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö ---
PRODUCT_PRICES = {
    "–î–ö": 100, "–ê–∫—Ç": 10, "–¢—Ä–∑": 20, "–ö–æ–º–±–æ/–ö—Ä–æ—Å—Å –ö–ö –û–¥–æ–±—Ä–µ–Ω–æ": 50,
    "–ö–æ–º–±–æ/–ö—Ä–æ—Å—Å –ö–ö –í—ã–¥–∞–Ω–æ": 100, "–¢—Ä–∑.": 20, "–¶–ü": 15, "–ì–æ—Å.–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": 5,
    "–°–º–∞—Ä—Ç": 25, "–ö–µ—à–±–µ–∫": 30, "–ñ–ö–£": 10, "–ë–°": 40, "–ò–Ω–≤–µ—Å—Ç–∫–æ–ø–∏–ª–∫–∞": 35,
    "–ë–° —Å–æ –°—Ç—Ä–∞—Ç–µ–≥–∏–µ–π": 55, "–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è": 5, "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –°—á–µ—Ç": 20,
    "–í–∫–ª–∞–¥": 25, "–î–µ—Ç—Å–∫–∞—è –ö—Ä–æ—Å—Å": 15, "–°–∏–º-–ö–∞—Ä—Ç–∞": 50, "–ü–µ—Ä–µ–≤–æ–¥ –ü–µ–Ω—Å–∏–∏": 70,
    "–°–µ–ª—Ñ–∏ –î–ö": 5, "–°–µ–ª—Ñ–∏ –ö–ö": 5, "–ö–ö": 150, "–ö—Ä–æ—Å—Å –î–ö": 50,
    "–°—Ç–∏–∫–µ—Ä –ö—Ä–æ—Å—Å": 20, "–ú–ü": 80
}

# --- –°—Ç–∏–ª–∏ ---
def apply_styles():
    st.markdown("""
        <style>
            .main { background-color: #FFFFFF; }
            
            div.stButton > button {
                height: 50px;
                border: 1px solid #CCCCCC;
                border-radius: 8px;
                background-color: #FFFFFF;
                color: #000000;
                font-family: 'Calibri', sans-serif;
                font-size: 16px;
                text-align: center;
            }
            div.stButton > button:hover {
                background-color: #F0F0F0;
                border-color: #AAAAAA;
            }
            .stToggle { font-family: 'Calibri', sans-serif; color: #000000; }
        </style>
    """, unsafe_allow_html=True)

# --- –õ–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
def initialize_global_state():
    if 'logged_in' not in st.session_state:
        st.session_state['logged_in'] = False
    if 'username' not in st.session_state:
        st.session_state['username'] = None
    if 'user_data' not in st.session_state:
        st.session_state['user_data'] = {}

def get_user_state():
    username = st.session_state['username']
    if username not in st.session_state['user_data']:
        st.session_state['user_data'][username] = {
            'page': 'main',
            'toggles': {},
            'report_text': ""
        }
    return st.session_state['user_data'][username]

def logout():
    st.session_state['logged_in'] = False
    st.session_state['username'] = None
    st.rerun()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ---
def go_to_page(page_name):
    user_state = get_user_state()
    user_state['toggles'] = {}
    user_state['page'] = page_name

def go_to_main():
    user_state = get_user_state()
    user_state['toggles'] = {}
    user_state['page'] = 'main'

def go_to_rouble_report():
    user_state = get_user_state()
    user_state['page'] = 'report_rouble'

def reset_all():
    user_state = get_user_state()
    user_state['page'] = 'main'
    user_state['toggles'] = {}
    user_state['report_text'] = ""

# --- –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ ---
def generate_report_text(main_product, toggles):
    product_list = PRODUCT_LISTS.get(main_product.upper())
    if not product_list:
        return ""
    report_lines = [f"{product} {'+' if toggles.get(product, False) else '-'}" for product in product_list]
    return "\n".join(report_lines)

# --- –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main_page():
    st.header("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç")

    left_space, main_content, right_space = st.columns([1, 4, 1])

    with main_content:
        st.button("–î–ö", on_click=go_to_page, args=('dk',), use_container_width=True)
        st.button("–ö–ö", on_click=go_to_page, args=('kk',), use_container_width=True)
        st.button("–ú–ü", on_click=go_to_page, args=('mp',), use_container_width=True)

def product_submenu_page(product_type, product_list):
    user_state = get_user_state()
    
    st.header(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è ¬´{product_type}¬ª")
    
    for product in product_list:
        user_state['toggles'][product] = st.toggle(
            product,
            value=user_state['toggles'].get(product, False),
            key=f"{st.session_state['username']}_{product_type}_{product}"
        )
    
    st.divider()
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
            user_state['report_text'] = generate_report_text(product_type, user_state['toggles'])
            user_state['page'] = 'report'
            st.rerun()
            
    with col2:
        st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è", on_click=go_to_main)

def report_page():
    user_state = get_user_state()

    st.header("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç")
    
    report_text = user_state.get('report_text', "–û—Ç—á–µ—Ç –ø—É—Å—Ç.")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    col1, col2 = st.columns([4, 1])
    
    with col1:
        st.subheader("üìã –û—Ç—á–µ—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    with col2:
        # –ö—Ä–∞—Å–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç st-copy-to-clipboard
        if st_copy_to_clipboard(report_text, before_copy_label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", after_copy_label="‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!"):
            st.success("–û—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
    
    # –ë–ª–æ–∫ —Å –∫–æ–¥–æ–º (—Ç–∞–∫–∂–µ –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∑–Ω–∞—á–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)
    st.code(report_text, language=None)
    
    st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å' –≤—ã—à–µ –∏–ª–∏ –∑–Ω–∞—á–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–º —É–≥–ª—É –±–ª–æ–∫–∞")

    col1, col2 = st.columns(2)
with col1:
    st.button("–°–±—Ä–æ—Å–∏—Ç—å", on_click=reset_all, use_container_width=True)
with col2:
    st.button("–ü–æ—Å—á–∏—Ç–∞—Ç—å –≤ —Ä—É–±–ª—è—Ö", on_click=go_to_rouble_report, use_container_width=True)

    # --- –ù–û–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: –û—Ç—á–µ—Ç –≤ —Ä—É–±–ª—è—Ö ---
def report_rouble_page():
    user_state = get_user_state()
    st.header("–û—Ç—á–µ—Ç –≤ —Ä—É–±–ª—è—Ö")

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ (True) –ø—Ä–æ–¥—É–∫—Ç—ã
    selected_products = [
        product for product, toggled in user_state['toggles'].items() if toggled
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–±—Ä–∞–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
    main_product_key = next((p for p in PRODUCT_LISTS.keys() if p in user_state['toggles']), None)
    if main_product_key and main_product_key not in selected_products:
        selected_products.insert(0, main_product_key)

    if not selected_products:
        st.warning("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.")
        st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", on_click=go_to_main)
        return

    total_sum = 0
    report_details = []

    for product in selected_products:
        price = PRODUCT_PRICES.get(product, 0) # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        total_sum += price
        report_details.append(f"- {product}: **{price} —Ä—É–±.**")

    st.subheader("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å:")
    st.markdown("\n".join(report_details), unsafe_allow_html=True)

    st.divider()
    
    st.metric(label="–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞", value=f"{total_sum} —Ä—É–±.")

    st.divider()

    st.button("–°–±—Ä–æ—Å–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", on_click=reset_all)

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    apply_styles()
    initialize_global_state()

    if not st.session_state.get('logged_in', False):
        login_page()
    else:
        st.write(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {st.session_state['username']}")
        st.button("–í—ã–π—Ç–∏", on_click=logout)

        user_state = get_user_state()

        if user_state['page'] == 'main':
            main_page()
        elif user_state['page'] == 'dk':
            product_submenu_page("–î–ö", PRODUCTS_DK)
        elif user_state['page'] == 'kk':
            product_submenu_page("–ö–ö", PRODUCTS_KK)
        elif user_state['page'] == 'mp':
            product_submenu_page("–ú–ü", PRODUCTS_MP)
        elif user_state['page'] == 'report':
            report_page()

if __name__ == "__main__":
    main()
